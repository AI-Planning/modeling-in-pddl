


(define (domain treasure)

    (:agents a b c)

    (:types loc)
    (:constants )

    (:predicates
            (has-treasure ?agent)
            (treasure-at ?l - loc)
        {AK}(at ?agent - agent ?l - loc)
        {AK}(connected ?l1 ?l2 - loc)
    )

    ; Move action modified so that agents are suspicious about rooms they aren't in
    (:action move
        :derive-condition   always
        :parameters         (?a - agent ?l1 ?l2 - loc)
        :precondition       (and (at ?a ?l1) (connected ?l1 ?l2))
        :effect             (and
                                (at ?a ?l2)
                                (!at ?a ?l1)

                                ; NOTE: Do the goal first, then try solving, then implement these effects
                                ;        before trying again.

                                ; TODO: ?a thinks it's possible there is a treasure at ?l1
                                ;  and also thinks it's possible there isn't a treasure at ?l1

                                ; TODO: When there is treasure at ?l2, then ?a will see it and believe it
                                ; Same for when there isn't treasure at ?l2

                            )
    )

    (:action take
        :derive-condition (at $agent$ ?l)
        :parameters       (?a - agent ?l - loc)
        :precondition     (and (at ?a ?l) (treasure-at ?l))
        :effect           (and (forall ?l2 - loc (!treasure-at ?l2)) (has-treasure ?a))
    )

    (:action drop
        :derive-condition (at $agent$ ?l)
        :parameters       (?a - agent ?l - loc)
        :precondition     (and (at ?a ?l) (has-treasure ?a))
        :effect           (and (forall ?a2 - agent (!has-treasure ?a2)) (treasure-at ?l))
    )

    (:action ask
        :derive-condition (at $agent$ ?l)
        :parameters (?a1 ?a2 ?a3 - agent ?l - loc)
        :precondition (and (at ?a1 ?l) (at ?a2 ?l))
        :effect (and (when [?a2](has-treasure ?a3) [?a1](has-treasure ?a3))
                     (when [?a2](has-treasure ?a3) [?a1][?a2](has-treasure ?a3))
                     (when [?a2](!has-treasure ?a3) [?a1](!has-treasure ?a3))
                     (when [?a2](!has-treasure ?a3) [?a1][?a2](!has-treasure ?a3)))
    )

)

(define (problem treasure4)

    (:domain treasure)

    (:objects l0 l1 - loc)

    (:projection )
    (:task valid_generation)

    (:init-type complete)
    (:init

        ; Just a pair of rooms
        (connected l1 l0)
        (connected l0 l1)

        (at a l1)
        (at b l1)
        (at c l1)

        ; Treasure in l1 (note that we are now specifying where there isn't treasure)
        (treasure-at l1)
        (!treasure-at l0)

    )

    (:depth 2)

    ; Goal:
    ;   - a has the treasure
    ;   - b and c believe there is treasure at locations 0 and 1 (respectively)
    ;   - all agents are in location l0
    ;   - NOTE: This shouldn't be solvable with suspicious agents
    (:goal


        ; TODO


    )
)
